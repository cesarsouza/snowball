// This file was generated automatically by the Snowball to C# compiler

namespace Snowball
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to Java compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "0.0.0")]
    public class German2Stemmer : SnowballStemmer
    {
        private static readonly Among[] a_0 =
        {
            new Among("", -1, 6, "", methodObject),
            new Among("ae", 0, 2, "", methodObject),
            new Among("oe", 0, 3, "", methodObject),
            new Among("qu", 0, 5, "", methodObject),
            new Among("ue", 0, 4, "", methodObject),
            new Among("\u00C3\u009F", 0, 1, "", methodObject)
        };

        private static readonly Among[] a_1 =
        {
            new Among("", -1, 6, "", methodObject),
            new Among("U", 0, 2, "", methodObject),
            new Among("Y", 0, 1, "", methodObject),
            new Among("\u00C3\u00A4", 0, 3, "", methodObject),
            new Among("\u00C3\u00B6", 0, 4, "", methodObject),
            new Among("\u00C3\u00BC", 0, 5, "", methodObject)
        };

        private static readonly Among[] a_2 =
        {
            new Among("e", -1, 2, "", methodObject),
            new Among("em", -1, 1, "", methodObject),
            new Among("en", -1, 2, "", methodObject),
            new Among("ern", -1, 1, "", methodObject),
            new Among("er", -1, 1, "", methodObject),
            new Among("s", -1, 3, "", methodObject),
            new Among("es", 5, 2, "", methodObject)
        };

        private static readonly Among[] a_3 =
        {
            new Among("en", -1, 1, "", methodObject),
            new Among("er", -1, 1, "", methodObject),
            new Among("st", -1, 2, "", methodObject),
            new Among("est", 2, 1, "", methodObject)
        };

        private static readonly Among[] a_4 =
        {
            new Among("ig", -1, 1, "", methodObject),
            new Among("lich", -1, 1, "", methodObject)
        };

        private static readonly Among[] a_5 =
        {
            new Among("end", -1, 1, "", methodObject),
            new Among("ig", -1, 2, "", methodObject),
            new Among("ung", -1, 1, "", methodObject),
            new Among("lich", -1, 3, "", methodObject),
            new Among("isch", -1, 2, "", methodObject),
            new Among("ik", -1, 2, "", methodObject),
            new Among("heit", -1, 3, "", methodObject),
            new Among("keit", -1, 4, "", methodObject)
        };

        private static int[] g_v = {17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 8 };

        private static int[] g_s_ending = {117, 30, 5 };

        private static int[] g_st_ending = {117, 30, 4 };

        private int I_x;
        private int I_p2;
        private int I_p1;


        private bool r_prelude()
        {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            // (, line 33
            // test, line 35
            v_1 = cursor;
            // repeat, line 35
            replab0: while (true)
            {
                v_2 = cursor;
                lab1: do 
                {
                    // goto, line 35
                    golab2: while (true)
                    {
                        v_3 = cursor;
                        lab3: do 
                        {
                            // (, line 35
                            if (!(in_grouping(g_v, 97, 252)))
                            {
                                goto lab3;
                            }
                            // [, line 36
                            bra = cursor;
                            // or, line 36
                            lab4: do 
                            {
                                v_4 = cursor;
                                lab5: do 
                                {
                                    // (, line 36
                                    // literal, line 36
                                    if (!(eq_s(1, "u")))
                                    {
                                        goto lab5;
                                    }
                                    // ], line 36
                                    ket = cursor;
                                    if (!(in_grouping(g_v, 97, 252)))
                                    {
                                        goto lab5;
                                    }
                                    // <-, line 36
                                    slice_from("U");
                                    goto lab4;
                                } while (false);
                                cursor = v_4;
                                // (, line 37
                                // literal, line 37
                                if (!(eq_s(1, "y")))
                                {
                                    goto lab3;
                                }
                                // ], line 37
                                ket = cursor;
                                if (!(in_grouping(g_v, 97, 252)))
                                {
                                    goto lab3;
                                }
                                // <-, line 37
                                slice_from("Y");
                            } while (false);
                            cursor = v_3;
                            goto golab2;
                        } while (false);
                        cursor = v_3;
                        if (cursor >= limit)
                        {
                            goto lab1;
                        }
                        cursor++;
                    }
                    goto replab0;
                } while (false);
                cursor = v_2;
                goto replab0;
            }
            cursor = v_1;
            // repeat, line 40
            replab6: while (true)
            {
                v_5 = cursor;
                lab7: do 
                {
                    // (, line 40
                    // [, line 41
                    bra = cursor;
                    // substring, line 41
                    among_var = find_among(a_0, 6);
                    if (among_var == 0)
                    {
                        goto lab7;
                    }
                    // ], line 41
                    ket = cursor;
                    switch(among_var) 
                    {
                        case 0:
                            goto lab7;
                        case 1:
                            // (, line 42
                            // <-, line 42
                            slice_from("ss");
                            break;
                        case 2:
                            // (, line 43
                            // <-, line 43
                            slice_from("\u00C3\u00A4");
                            break;
                        case 3:
                            // (, line 44
                            // <-, line 44
                            slice_from("\u00C3\u00B6");
                            break;
                        case 4:
                            // (, line 45
                            // <-, line 45
                            slice_from("\u00C3\u00BC");
                            break;
                        case 5:
                            // (, line 46
                            // hop, line 46

                            {
                                int c = cursor + 2;
                                if (0 > c || c > limit)
                                {
                                    goto lab7;
                                }
                                cursor = c;
                            }
                            break;
                        case 6:
                            // (, line 47
                            // next, line 47
                            if (cursor >= limit)
                            {
                                goto lab7;
                            }
                            cursor++;
                            break;
                    }
                    goto replab6;
                } while (false);
                cursor = v_5;
                goto replab6;
            }
            return true;
        }

        private bool r_mark_regions()
        {
            int v_1;
            // (, line 53
            I_p1 = limit;
            I_p2 = limit;
            // test, line 58
            v_1 = cursor;
            // (, line 58
            // hop, line 58

            {
                int c = cursor + 3;
                if (0 > c || c > limit)
                {
                    return false;
                }
                cursor = c;
            }
            // setmark x, line 58
            I_x = cursor;
            cursor = v_1;
            // gopast, line 60
            golab0: while (true)
            {
                lab1: do 
                {
                    if (!(in_grouping(g_v, 97, 252)))
                    {
                        goto lab1;
                    }
                    goto golab0;
                } while (false);
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            // gopast, line 60
            golab2: while (true)
            {
                lab3: do 
                {
                    if (!(out_grouping(g_v, 97, 252)))
                    {
                        goto lab3;
                    }
                    goto golab2;
                } while (false);
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            // setmark p1, line 60
            I_p1 = cursor;
            // try, line 61
            lab4: do 
            {
                // (, line 61
                if (!(I_p1 < I_x))

                {
                    goto lab4;
                }
                I_p1 = I_x;
            } while (false);
            // gopast, line 62
            golab5: while (true)
            {
                lab6: do 
                {
                    if (!(in_grouping(g_v, 97, 252)))
                    {
                        goto lab6;
                    }
                    goto golab5;
                } while (false);
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            // gopast, line 62
            golab7: while (true)
            {
                lab8: do 
                {
                    if (!(out_grouping(g_v, 97, 252)))
                    {
                        goto lab8;
                    }
                    goto golab7;
                } while (false);
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            // setmark p2, line 62
            I_p2 = cursor;
            return true;
        }

        private bool r_postlude()
        {
            int among_var;
            int v_1;
            // repeat, line 66
            replab0: while (true)
            {
                v_1 = cursor;
                lab1: do 
                {
                    // (, line 66
                    // [, line 68
                    bra = cursor;
                    // substring, line 68
                    among_var = find_among(a_1, 6);
                    if (among_var == 0)
                    {
                        goto lab1;
                    }
                    // ], line 68
                    ket = cursor;
                    switch(among_var) 
                    {
                        case 0:
                            goto lab1;
                        case 1:
                            // (, line 69
                            // <-, line 69
                            slice_from("y");
                            break;
                        case 2:
                            // (, line 70
                            // <-, line 70
                            slice_from("u");
                            break;
                        case 3:
                            // (, line 71
                            // <-, line 71
                            slice_from("a");
                            break;
                        case 4:
                            // (, line 72
                            // <-, line 72
                            slice_from("o");
                            break;
                        case 5:
                            // (, line 73
                            // <-, line 73
                            slice_from("u");
                            break;
                        case 6:
                            // (, line 74
                            // next, line 74
                            if (cursor >= limit)
                            {
                                goto lab1;
                            }
                            cursor++;
                            break;
                    }
                    goto replab0;
                } while (false);
                cursor = v_1;
                goto replab0;
            }
            return true;
        }

        private bool r_R1()
        {
            if (!(I_p1 <= cursor))

            {
                return false;
            }
            return true;
        }

        private bool r_R2()
        {
            if (!(I_p2 <= cursor))

            {
                return false;
            }
            return true;
        }

        private bool r_standard_suffix()
        {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            int v_10;
            // (, line 84
            // do, line 85
            v_1 = limit - cursor;
            lab0: do 
            {
                // (, line 85
                // [, line 86
                ket = cursor;
                // substring, line 86
                among_var = find_among_b(a_2, 7);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 86
                bra = cursor;
                // call R1, line 86
                if (!r_R1())
                {
                    goto lab0;
                }
                switch(among_var) 
                {
                    case 0:
                        goto lab0;
                    case 1:
                        // (, line 88
                        // delete, line 88
                        slice_del();
                        break;
                    case 2:
                        // (, line 91
                        // delete, line 91
                        slice_del();
                        // try, line 92
                        v_2 = limit - cursor;
                        lab1: do 
                        {
                            // (, line 92
                            // [, line 92
                            ket = cursor;
                            // literal, line 92
                            if (!(eq_s_b(1, "s")))
                            {
                                cursor = limit - v_2;
                                goto lab1;
                            }
                            // ], line 92
                            bra = cursor;
                            // literal, line 92
                            if (!(eq_s_b(3, "nis")))
                            {
                                cursor = limit - v_2;
                                goto lab1;
                            }
                            // delete, line 92
                            slice_del();
                        } while (false);
                        break;
                    case 3:
                        // (, line 95
                        if (!(in_grouping_b(g_s_ending, 98, 116)))
                        {
                            goto lab0;
                        }
                        // delete, line 95
                        slice_del();
                        break;
                }
            } while (false);
            cursor = limit - v_1;
            // do, line 99
            v_3 = limit - cursor;
            lab2: do 
            {
                // (, line 99
                // [, line 100
                ket = cursor;
                // substring, line 100
                among_var = find_among_b(a_3, 4);
                if (among_var == 0)
                {
                    goto lab2;
                }
                // ], line 100
                bra = cursor;
                // call R1, line 100
                if (!r_R1())
                {
                    goto lab2;
                }
                switch(among_var) 
                {
                    case 0:
                        goto lab2;
                    case 1:
                        // (, line 102
                        // delete, line 102
                        slice_del();
                        break;
                    case 2:
                        // (, line 105
                        if (!(in_grouping_b(g_st_ending, 98, 116)))
                        {
                            goto lab2;
                        }
                        // hop, line 105

                        {
                            int c = cursor - 3;
                            if (limit_backward > c || c > limit)
                            {
                                goto lab2;
                            }
                            cursor = c;
                        }
                        // delete, line 105
                        slice_del();
                        break;
                }
            } while (false);
            cursor = limit - v_3;
            // do, line 109
            v_4 = limit - cursor;
            lab3: do 
            {
                // (, line 109
                // [, line 110
                ket = cursor;
                // substring, line 110
                among_var = find_among_b(a_5, 8);
                if (among_var == 0)
                {
                    goto lab3;
                }
                // ], line 110
                bra = cursor;
                // call R2, line 110
                if (!r_R2())
                {
                    goto lab3;
                }
                switch(among_var) 
                {
                    case 0:
                        goto lab3;
                    case 1:
                        // (, line 112
                        // delete, line 112
                        slice_del();
                        // try, line 113
                        v_5 = limit - cursor;
                        lab4: do 
                        {
                            // (, line 113
                            // [, line 113
                            ket = cursor;
                            // literal, line 113
                            if (!(eq_s_b(2, "ig")))
                            {
                                cursor = limit - v_5;
                                goto lab4;
                            }
                            // ], line 113
                            bra = cursor;
                            // not, line 113

                            {
                                v_6 = limit - cursor;
                                lab5: do 
                                {
                                    // literal, line 113
                                    if (!(eq_s_b(1, "e")))
                                    {
                                        goto lab5;
                                    }
                                    cursor = limit - v_5;
                                    goto lab4;
                                } while (false);
                                cursor = limit - v_6;
                            }
                            // call R2, line 113
                            if (!r_R2())
                            {
                                cursor = limit - v_5;
                                goto lab4;
                            }
                            // delete, line 113
                            slice_del();
                        } while (false);
                        break;
                    case 2:
                        // (, line 116
                        // not, line 116

                        {
                            v_7 = limit - cursor;
                            lab6: do 
                            {
                                // literal, line 116
                                if (!(eq_s_b(1, "e")))
                                {
                                    goto lab6;
                                }
                                goto lab3;
                            } while (false);
                            cursor = limit - v_7;
                        }
                        // delete, line 116
                        slice_del();
                        break;
                    case 3:
                        // (, line 119
                        // delete, line 119
                        slice_del();
                        // try, line 120
                        v_8 = limit - cursor;
                        lab7: do 
                        {
                            // (, line 120
                            // [, line 121
                            ket = cursor;
                            // or, line 121
                            lab8: do 
                            {
                                v_9 = limit - cursor;
                                lab9: do 
                                {
                                    // literal, line 121
                                    if (!(eq_s_b(2, "er")))
                                    {
                                        goto lab9;
                                    }
                                    goto lab8;
                                } while (false);
                                cursor = limit - v_9;
                                // literal, line 121
                                if (!(eq_s_b(2, "en")))
                                {
                                    cursor = limit - v_8;
                                    goto lab7;
                                }
                            } while (false);
                            // ], line 121
                            bra = cursor;
                            // call R1, line 121
                            if (!r_R1())
                            {
                                cursor = limit - v_8;
                                goto lab7;
                            }
                            // delete, line 121
                            slice_del();
                        } while (false);
                        break;
                    case 4:
                        // (, line 125
                        // delete, line 125
                        slice_del();
                        // try, line 126
                        v_10 = limit - cursor;
                        lab10: do 
                        {
                            // (, line 126
                            // [, line 127
                            ket = cursor;
                            // substring, line 127
                            among_var = find_among_b(a_4, 2);
                            if (among_var == 0)
                            {
                                cursor = limit - v_10;
                                goto lab10;
                            }
                            // ], line 127
                            bra = cursor;
                            // call R2, line 127
                            if (!r_R2())
                            {
                                cursor = limit - v_10;
                                goto lab10;
                            }
                            switch(among_var) 
                            {
                                case 0:
                                    cursor = limit - v_10;
                                    goto lab10;
                                case 1:
                                    // (, line 129
                                    // delete, line 129
                                    slice_del();
                                    break;
                            }
                        } while (false);
                        break;
                }
            } while (false);
            cursor = limit - v_4;
            return true;
        }

        private bool stem()
        {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            // (, line 139
            // do, line 140
            v_1 = cursor;
            lab0: do 
            {
                // call prelude, line 140
                if (!r_prelude())
                {
                    goto lab0;
                }
            } while (false);
            cursor = v_1;
            // do, line 141
            v_2 = cursor;
            lab1: do 
            {
                // call mark_regions, line 141
                if (!r_mark_regions())
                {
                    goto lab1;
                }
            } while (false);
            cursor = v_2;
            // backwards, line 142
            limit_backward = cursor; cursor = limit;
            // do, line 143
            v_3 = limit - cursor;
            lab2: do 
            {
                // call standard_suffix, line 143
                if (!r_standard_suffix())
                {
                    goto lab2;
                }
            } while (false);
            cursor = limit - v_3;
            cursor = limit_backward;            // do, line 144
            v_4 = cursor;
            lab3: do 
            {
                // call postlude, line 144
                if (!r_postlude())
                {
                    goto lab3;
                }
            } while (false);
            cursor = v_4;
            return true;
        }

        public override bool Stem()
        {
            return this.stem();
        }

    }
}
