// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Snowball
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to Java compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "0.0.0")]
    public partial class DutchStemmer : SnowballStemmer
    {
        private int I_p2;
        private int I_p1;
        private bool B_e_found;

        private static int[] g_v = { 17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128 };

        private static int[] g_v_I = { 1, 0, 0, 17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128 };

        private static int[] g_v_j = { 17, 67, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128 };

        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;

        public DutchStemmer()
        {
            a_0 = new[] 
            {
                new Among(UTF16(""), -1, 6),
                new Among(UTF16("\u00C3\u00A1"), 0, 1),
                new Among(UTF16("\u00C3\u00A4"), 0, 1),
                new Among(UTF16("\u00C3\u00A9"), 0, 2),
                new Among(UTF16("\u00C3\u00AB"), 0, 2),
                new Among(UTF16("\u00C3\u00AD"), 0, 3),
                new Among(UTF16("\u00C3\u00AF"), 0, 3),
                new Among(UTF16("\u00C3\u00B3"), 0, 4),
                new Among(UTF16("\u00C3\u00B6"), 0, 4),
                new Among(UTF16("\u00C3\u00BA"), 0, 5),
                new Among(UTF16("\u00C3\u00BC"), 0, 5)
            };

            a_1 = new[] 
            {
                new Among(UTF16(""), -1, 3),
                new Among(UTF16("I"), 0, 2),
                new Among(UTF16("Y"), 0, 1)
            };

            a_2 = new[] 
            {
                new Among(UTF16("dd"), -1, -1),
                new Among(UTF16("kk"), -1, -1),
                new Among(UTF16("tt"), -1, -1)
            };

            a_3 = new[] 
            {
                new Among(UTF16("ene"), -1, 2),
                new Among(UTF16("se"), -1, 3),
                new Among(UTF16("en"), -1, 2),
                new Among(UTF16("heden"), 2, 1),
                new Among(UTF16("s"), -1, 3)
            };

            a_4 = new[] 
            {
                new Among(UTF16("end"), -1, 1),
                new Among(UTF16("ig"), -1, 2),
                new Among(UTF16("ing"), -1, 1),
                new Among(UTF16("lijk"), -1, 3),
                new Among(UTF16("baar"), -1, 4),
                new Among(UTF16("bar"), -1, 5)
            };

            a_5 = new[] 
            {
                new Among(UTF16("aa"), -1, -1),
                new Among(UTF16("ee"), -1, -1),
                new Among(UTF16("oo"), -1, -1),
                new Among(UTF16("uu"), -1, -1)
            };

        }



        private bool r_prelude()
        {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            // (, line 41
            // test, line 42
            v_1 = cursor;
            // repeat, line 42
            while (true)
            {
                v_2 = cursor;
                // (, line 42
                // [, line 43
                bra = cursor;
                // substring, line 43
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 43
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        break;
                    case 1:
                        // (, line 45
                        // <-, line 45
                        slice_from(UTF16("a"));
                        break;
                    case 2:
                        // (, line 47
                        // <-, line 47
                        slice_from(UTF16("e"));
                        break;
                    case 3:
                        // (, line 49
                        // <-, line 49
                        slice_from(UTF16("i"));
                        break;
                    case 4:
                        // (, line 51
                        // <-, line 51
                        slice_from(UTF16("o"));
                        break;
                    case 5:
                        // (, line 53
                        // <-, line 53
                        slice_from(UTF16("u"));
                        break;
                    case 6:
                        // (, line 54
                        // next, line 54
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: 
                cursor = v_2;
                break;
            }
            cursor = v_1;
            // try, line 57
            v_3 = cursor;
            // (, line 57
            // [, line 57
            bra = cursor;
            // literal, line 57
            if (!(eq_s(UTF16("y"))))
            {
                cursor = v_3;
                goto lab1;
            }
            // ], line 57
            ket = cursor;
            // <-, line 57
            slice_from(UTF16("Y"));
        lab1: 
            // repeat, line 58
            while (true)
            {
                v_4 = cursor;
                while (true) 
                {
                    // goto, line 58
                    v_5 = cursor;
                    // (, line 58
                    if (!(in_grouping(g_v, 97, 232)))
                    {
                        goto lab3;
                    }
                    // [, line 59
                    bra = cursor;
                    // or, line 59
                    v_6 = cursor;
                    // (, line 59
                    // literal, line 59
                    if (!(eq_s(UTF16("i"))))
                    {
                        goto lab5;
                    }
                    // ], line 59
                    ket = cursor;
                    if (!(in_grouping(g_v, 97, 232)))
                    {
                        goto lab5;
                    }
                    // <-, line 59
                    slice_from(UTF16("I"));
                    goto lab4;
                lab5: 
                    cursor = v_6;
                    // (, line 60
                    // literal, line 60
                    if (!(eq_s(UTF16("y"))))
                    {
                        goto lab3;
                    }
                    // ], line 60
                    ket = cursor;
                    // <-, line 60
                    slice_from(UTF16("Y"));
                lab4: 
                    cursor = v_5;
                    break;
                lab3: 
                    cursor = v_5;
                    if (cursor >= limit)
                    {
                        goto lab2;
                    }
                    cursor++;
                }
                continue;
            lab2: 
                cursor = v_4;
                break;
            }

            return true;
        }

        private bool r_mark_regions()
        {
            // (, line 64
            I_p1 = limit;
            I_p2 = limit;
            while (true) 
            {
                // gopast, line 69
                if (!(in_grouping(g_v, 97, 232)))
                {
                    goto lab0;
                }
                break;
            lab0: 
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            while (true) 
            {
                // gopast, line 69
                if (!(out_grouping(g_v, 97, 232)))
                {
                    goto lab1;
                }
                break;
            lab1: 
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            // setmark p1, line 69
            I_p1 = cursor;
            // try, line 70
            // (, line 70
            if (!(I_p1 < 3))
            {
                goto lab2;
            }
            I_p1 = 3;
        lab2: 
            while (true) 
            {
                // gopast, line 71
                if (!(in_grouping(g_v, 97, 232)))
                {
                    goto lab3;
                }
                break;
            lab3: 
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            while (true) 
            {
                // gopast, line 71
                if (!(out_grouping(g_v, 97, 232)))
                {
                    goto lab4;
                }
                break;
            lab4: 
                if (cursor >= limit)
                {
                    return false;
                }
                cursor++;
            }
            // setmark p2, line 71
            I_p2 = cursor;

            return true;
        }

        private bool r_postlude()
        {
            int among_var;
            int v_1;
            // repeat, line 75
            while (true)
            {
                v_1 = cursor;
                // (, line 75
                // [, line 77
                bra = cursor;
                // substring, line 77
                among_var = find_among(a_1);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 77
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        break;
                    case 1:
                        // (, line 78
                        // <-, line 78
                        slice_from(UTF16("y"));
                        break;
                    case 2:
                        // (, line 79
                        // <-, line 79
                        slice_from(UTF16("i"));
                        break;
                    case 3:
                        // (, line 80
                        // next, line 80
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: 
                cursor = v_1;
                break;
            }

            return true;
        }

        private bool r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return false;
            }

            return true;
        }

        private bool r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return false;
            }

            return true;
        }

        private bool r_undouble()
        {
            int v_1;
            // (, line 90
            // test, line 91
            v_1 = limit - cursor;
            // among, line 91
            if (find_among_b(a_2) == 0)
            {
                return false;
            }
            cursor = limit - v_1;
            // [, line 91
            ket = cursor;
            // next, line 91
            if (cursor <= limit_backward)
            {
                return false;
            }
            cursor--;
            // ], line 91
            bra = cursor;
            // delete, line 91
            slice_del();

            return true;
        }

        private bool r_e_ending()
        {
            int v_1;
            // (, line 94
            // unset e_found, line 95
            B_e_found = false;
            // [, line 96
            ket = cursor;
            // literal, line 96
            if (!(eq_s_b(UTF16("e"))))
            {
                return false;
            }
            // ], line 96
            bra = cursor;
            // call R1, line 96
            if (!r_R1())
            {
                return false;
            }
            // test, line 96
            v_1 = limit - cursor;
            if (!(out_grouping_b(g_v, 97, 232)))
            {
                return false;
            }
            cursor = limit - v_1;
            // delete, line 96
            slice_del();
            // set e_found, line 97
            B_e_found = true;
            // call undouble, line 98
            if (!r_undouble())
            {
                return false;
            }

            return true;
        }

        private bool r_en_ending()
        {
            int v_1;
            int v_2;
            // (, line 101
            // call R1, line 102
            if (!r_R1())
            {
                return false;
            }
            // and, line 102
            v_1 = limit - cursor;
            if (!(out_grouping_b(g_v, 97, 232)))
            {
                return false;
            }
            cursor = limit - v_1;
            // not, line 102

            {
                v_2 = limit - cursor;
                // literal, line 102
                if (!(eq_s_b(UTF16("gem"))))
                {
                    goto lab0;
                }
                return false;
            lab0: 
                cursor = limit - v_2;
            }
            // delete, line 102
            slice_del();
            // call undouble, line 103
            if (!r_undouble())
            {
                return false;
            }

            return true;
        }

        private bool r_standard_suffix()
        {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            int v_10;
            // (, line 106
            // do, line 107
            v_1 = limit - cursor;
            // (, line 107
            // [, line 108
            ket = cursor;
            // substring, line 108
            among_var = find_among_b(a_3);
            if (among_var == 0)
            {
                goto lab0;
            }
            // ], line 108
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    break;
                case 1:
                    // (, line 110
                    // call R1, line 110
                    if (!r_R1())
                    {
                        goto lab0;
                    }
                    // <-, line 110
                    slice_from(UTF16("heid"));
                    break;
                case 2:
                    // (, line 113
                    // call en_ending, line 113
                    if (!r_en_ending())
                    {
                        goto lab0;
                    }
                    break;
                case 3:
                    // (, line 116
                    // call R1, line 116
                    if (!r_R1())
                    {
                        goto lab0;
                    }
                    if (!(out_grouping_b(g_v_j, 97, 232)))
                    {
                        goto lab0;
                    }
                    // delete, line 116
                    slice_del();
                    break;
            }
        lab0: 
            cursor = limit - v_1;
            // do, line 120
            v_2 = limit - cursor;
            // call e_ending, line 120
            if (!r_e_ending())
            {
                goto lab1;
            }
        lab1: 
            cursor = limit - v_2;
            // do, line 122
            v_3 = limit - cursor;
            // (, line 122
            // [, line 122
            ket = cursor;
            // literal, line 122
            if (!(eq_s_b(UTF16("heid"))))
            {
                goto lab2;
            }
            // ], line 122
            bra = cursor;
            // call R2, line 122
            if (!r_R2())
            {
                goto lab2;
            }
            // not, line 122

            {
                v_4 = limit - cursor;
                // literal, line 122
                if (!(eq_s_b(UTF16("c"))))
                {
                    goto lab3;
                }
                goto lab2;
            lab3: 
                cursor = limit - v_4;
            }
            // delete, line 122
            slice_del();
            // [, line 123
            ket = cursor;
            // literal, line 123
            if (!(eq_s_b(UTF16("en"))))
            {
                goto lab2;
            }
            // ], line 123
            bra = cursor;
            // call en_ending, line 123
            if (!r_en_ending())
            {
                goto lab2;
            }
        lab2: 
            cursor = limit - v_3;
            // do, line 126
            v_5 = limit - cursor;
            // (, line 126
            // [, line 127
            ket = cursor;
            // substring, line 127
            among_var = find_among_b(a_4);
            if (among_var == 0)
            {
                goto lab4;
            }
            // ], line 127
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    break;
                case 1:
                    // (, line 129
                    // call R2, line 129
                    if (!r_R2())
                    {
                        goto lab4;
                    }
                    // delete, line 129
                    slice_del();
                    // or, line 130
                    v_6 = limit - cursor;
                    // (, line 130
                    // [, line 130
                    ket = cursor;
                    // literal, line 130
                    if (!(eq_s_b(UTF16("ig"))))
                    {
                        goto lab6;
                    }
                    // ], line 130
                    bra = cursor;
                    // call R2, line 130
                    if (!r_R2())
                    {
                        goto lab6;
                    }
                    // not, line 130

                    {
                        v_7 = limit - cursor;
                        // literal, line 130
                        if (!(eq_s_b(UTF16("e"))))
                        {
                            goto lab7;
                        }
                        goto lab6;
                    lab7: 
                        cursor = limit - v_7;
                    }
                    // delete, line 130
                    slice_del();
                    goto lab5;
                lab6: 
                    cursor = limit - v_6;
                    // call undouble, line 130
                    if (!r_undouble())
                    {
                        goto lab4;
                    }
                lab5: 
                    break;
                case 2:
                    // (, line 133
                    // call R2, line 133
                    if (!r_R2())
                    {
                        goto lab4;
                    }
                    // not, line 133

                    {
                        v_8 = limit - cursor;
                        // literal, line 133
                        if (!(eq_s_b(UTF16("e"))))
                        {
                            goto lab8;
                        }
                        goto lab4;
                    lab8: 
                        cursor = limit - v_8;
                    }
                    // delete, line 133
                    slice_del();
                    break;
                case 3:
                    // (, line 136
                    // call R2, line 136
                    if (!r_R2())
                    {
                        goto lab4;
                    }
                    // delete, line 136
                    slice_del();
                    // call e_ending, line 136
                    if (!r_e_ending())
                    {
                        goto lab4;
                    }
                    break;
                case 4:
                    // (, line 139
                    // call R2, line 139
                    if (!r_R2())
                    {
                        goto lab4;
                    }
                    // delete, line 139
                    slice_del();
                    break;
                case 5:
                    // (, line 142
                    // call R2, line 142
                    if (!r_R2())
                    {
                        goto lab4;
                    }
                    // Boolean test e_found, line 142
                    if (!(B_e_found))
                    {
                        goto lab4;
                    }
                    // delete, line 142
                    slice_del();
                    break;
            }
        lab4: 
            cursor = limit - v_5;
            // do, line 146
            v_9 = limit - cursor;
            // (, line 146
            if (!(out_grouping_b(g_v_I, 73, 232)))
            {
                goto lab9;
            }
            // test, line 148
            v_10 = limit - cursor;
            // (, line 148
            // among, line 149
            if (find_among_b(a_5) == 0)
            {
                goto lab9;
            }
            if (!(out_grouping_b(g_v, 97, 232)))
            {
                goto lab9;
            }
            cursor = limit - v_10;
            // [, line 152
            ket = cursor;
            // next, line 152
            if (cursor <= limit_backward)
            {
                goto lab9;
            }
            cursor--;
            // ], line 152
            bra = cursor;
            // delete, line 152
            slice_del();
        lab9: 
            cursor = limit - v_9;

            return true;
        }

        private bool stem()
        {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            // (, line 157
            // do, line 159
            v_1 = cursor;
            // call prelude, line 159
            if (!r_prelude())
            {
                goto lab0;
            }
        lab0: 
            cursor = v_1;
            // do, line 160
            v_2 = cursor;
            // call mark_regions, line 160
            if (!r_mark_regions())
            {
                goto lab1;
            }
        lab1: 
            cursor = v_2;
            // backwards, line 161
            limit_backward = cursor; cursor = limit;
            // do, line 162
            v_3 = limit - cursor;
            // call standard_suffix, line 162
            if (!r_standard_suffix())
            {
                goto lab2;
            }
        lab2: 
            cursor = limit - v_3;
            cursor = limit_backward;
            // do, line 163
            v_4 = cursor;
            // call postlude, line 163
            if (!r_postlude())
            {
                goto lab3;
            }
        lab3: 
            cursor = v_4;

            return true;
        }

        protected override bool Process()
        {
            return this.stem();
        }

    }
}

